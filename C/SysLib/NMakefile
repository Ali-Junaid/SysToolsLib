###############################################################################
#									      #
#   File name	    NMakefile						      #
#									      #
#   Description     An NMake file for making all SysLib library versions      #
#									      #
#   Notes	    make.bat looks for a default nmake file called nmakefile. #
#									      #
#   History								      #
#    2015-11-04 JFL Split the old MultiOS.mak into NMakeFile and Files.mak.   #
#    2016-04-11 JFL Renamed NODOSLIB as BIOSLIB.                              #
#    2016-04-13 JFL Copy only the changed libraries into the central lib dir. #
#		    Make sure recursive make calls are always executed.	      #
#    2016-04-14 JFL Only build the target versions that can be built.         #
#    2016-04-22 JFL Renamed the MULTIOS library as SYSLIB.		      #
#    2016-09-27 JFL Added support for an optional OUTDIR.      		      #
#    2016-10-04 JFL Make sure nothing is displayed when doing a make clean.   #
#    2016-10-06 JFL Added targets mostlyclean & distclean.                    #
#    2016-10-11 JFL Adapted for use with make files in the global include dir.#
#		    							      #
#         © Copyright 2016 Hewlett Packard Enterprise Development LP          #
# Licensed under the Apache 2.0 license - www.apache.org/licenses/LICENSE-2.0 #
###############################################################################

!IF DEFINED(MESSAGES)
!MESSAGE Started NMakefile in $(MAKEDIR) # Display this make file name
!ENDIF

!IF DEFINED(OUTDIR)
OD=$(OUTDIR)^\
LIBDIR=$(OUTDIR)\lib
!ELSE
OD=
LIBDIR=lib
!ENDIF

# Check requirements for 16-bits builds statically and silently 
!IF DEFINED(DOS_CC) && EXIST("$(STINCLUDE)\BIOS.mak") && DEFINED(BIOSLIB)
REQS_BIOS=1
!ELSE
REQS_BIOS=0
!ENDIF
!IF DEFINED(DOS_CC)
REQS_DOS=1
!ELSE
REQS_DOS=0
!ENDIF
# Check requirements for 32/64-bits builds statically and silently 
!IF DEFINED(WIN95_CC) && EXIST("$(STINCLUDE)\WIN95.mak") && DEFINED(WIN95_WINSDK) && DEFINED(HAS_98DDK)
REQS_WIN95=1
!ELSE
REQS_WIN95=0
!ENDIF
!IF DEFINED(WIN32_CC)
REQS_WIN32=1
!ELSE
REQS_WIN32=0
!ENDIF
!IF DEFINED(IA64_CC) && EXIST("$(STINCLUDE)\IA64.mak") && DEFINED(IA64_WINSDK)
REQS_IA64=1
!ELSE
REQS_IA64=0
!ENDIF
!IF DEFINED(WIN64_CC)
REQS_WIN64=1
!ELSE
REQS_WIN64=0
!ENDIF

!IF "$(OS)"=="Windows_NT" # ie. if OS is not specified on the command line
OS=
!IF $(REQS_BIOS)
OS=$(OS) BIOS
!ENDIF
!IF $(REQS_DOS)
OS=$(OS) DOS
!ENDIF
!IF $(REQS_WIN95)
OS=$(OS) WIN95
!ENDIF
!IF $(REQS_WIN32)
OS=$(OS) WIN32
!ENDIF
!IF $(REQS_IA64)
OS=$(OS) IA64
!ENDIF
!IF $(REQS_WIN64)
OS=$(OS) WIN64
!ENDIF
!ENDIF
!IF DEFINED(MESSAGES)
!MESSAGE OS=$(OS)
!ENDIF

MSG=>con echo		# Command for writing a progress message on the console
HEADLINE=$(MSG).&$(MSG)	# Output a blank line, then a message

# Default goal: Generate all versions
syslib_default: all

ALL = \
!IF !("$(OS:BIOS=)"=="$(OS)") # IF $(OS) contains BIOS
!IF $(REQS_BIOS)
     check_bios_opts bios \
     bios\debug \
!ELSE # failed the static requirements test for BIOS builds
     explain_bios_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:DOS=)"=="$(OS)") # IF $(OS) contains DOS
!IF $(REQS_DOS)
     check_dos_opts dos \
     dos\debug \
!ELSE # failed the static requirements test for DOS builds
     explain_dos_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:WIN95=)"=="$(OS)") # IF $(OS) contains WIN95
!IF $(REQS_WIN95)
     check_win95_opts win95 \
     win95\debug \
!ELSE # failed the static requirements test for Win95 builds
     explain_win95_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:WIN32=)"=="$(OS)") # IF $(OS) contains WIN32
!IF $(REQS_WIN32)
     check_win32_opts win32 \
     win32\debug \
!ELSE # failed the static requirements test for Win32 builds
     explain_win32_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:IA64=)"=="$(OS)") # IF $(OS) contains IA64
!IF $(REQS_IA64)
     check_ia64_opts ia64 \
     ia64\debug \
!ELSE # failed the static requirements test for IA64 builds
     explain_ia64_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:WIN64=)"=="$(OS)") # IF $(OS) contains WIN64
!IF $(REQS_WIN64)
     check_win64_opts win64 \
     win64\debug \
!ELSE # failed the static requirements test for Win64 builds
     explain_win64_reqs \
!ENDIF
!ENDIF
     INCDIR

syslib.lib: \
!IF !("$(OS:BIOS=)"=="$(OS)") # IF $(OS) contains BIOS
!IF $(REQS_BIOS)
     check_bios_opts bios \
!ELSE # failed the static requirements test for BIOS builds
     explain_bios_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:DOS=)"=="$(OS)") # IF $(OS) contains DOS
!IF $(REQS_DOS)
     check_dos_opts dos \
!ELSE # failed the static requirements test for DOS builds
     explain_dos_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:WIN95=)"=="$(OS)") # IF $(OS) contains WIN95
!IF $(REQS_WIN95)
     check_win95_opts win95 \
!ELSE # failed the static requirements test for Win95 builds
     explain_win95_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:WIN32=)"=="$(OS)") # IF $(OS) contains WIN32
!IF $(REQS_WIN32)
     check_win32_opts win32 \
!ELSE # failed the static requirements test for Win32 builds
     explain_win32_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:IA64=)"=="$(OS)") # IF $(OS) contains IA64
!IF $(REQS_IA64)
     check_ia64_opts ia64 \
!ELSE # failed the static requirements test for IA64 builds
     explain_ia64_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:WIN64=)"=="$(OS)") # IF $(OS) contains WIN64
!IF $(REQS_WIN64)
     check_win64_opts win64 \
!ELSE # failed the static requirements test for Win64 builds
     explain_win64_reqs \
!ENDIF
!ENDIF

debug\syslib.lib: \
!IF !("$(OS:BIOS=)"=="$(OS)") # IF $(OS) contains BIOS
!IF $(REQS_BIOS)
     check_bios_opts bios\debug \
!ELSE # failed the static requirements test for BIOS builds
     explain_bios_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:DOS=)"=="$(OS)") # IF $(OS) contains DOS
!IF $(REQS_DOS)
     check_dos_opts dos\debug \
!ELSE # failed the static requirements test for DOS builds
     explain_dos_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:WIN95=)"=="$(OS)") # IF $(OS) contains WIN95
!IF $(REQS_WIN95)
     check_win95_opts win95\debug \
!ELSE # failed the static requirements test for Win95 builds
     explain_win95_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:WIN32=)"=="$(OS)") # IF $(OS) contains WIN32
!IF $(REQS_WIN32)
     check_win32_opts win32\debug \
!ELSE # failed the static requirements test for Win32 builds
     explain_win32_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:IA64=)"=="$(OS)") # IF $(OS) contains IA64
!IF $(REQS_IA64)
     check_ia64_opts ia64\debug \
!ELSE # failed the static requirements test for IA64 builds
     explain_ia64_reqs \
!ENDIF
!ENDIF
!IF !("$(OS:WIN64=)"=="$(OS)") # IF $(OS) contains WIN64
!IF $(REQS_WIN64)
     check_win64_opts win64\debug \
!ELSE # failed the static requirements test for Win64 builds
     explain_win64_reqs \
!ENDIF
!ENDIF

# Output the default goal name for make.bat
goal_name:
    echo syslib

# Rules for checking dynamic dependancies, and explaining static ones
CANT_FIND=Configure.bat did not find

explain_bios_reqs:
    $(MSG) Skipping BIOS builds as some requirements are not met:
    if not defined DOS_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ 1.x compiler (MSVC)
    if not defined BIOSLIB	$(MSG) $(CANT_FIND) the BIOSLIB library

explain_dos_reqs:
    $(MSG) Skipping DOS builds as some requirements are not met:
    if not defined DOS_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ 1.x compiler (MSVC)

explain_win95_reqs:
    $(MSG) Skipping WIN95 builds as some requirements are not met:
    if not defined WIN95_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ x86 compiler for Win95 (WIN95_CC)

explain_win32_reqs:
    $(MSG) Skipping WIN32 builds as some requirements are not met:
    if not defined WIN32_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ x86 compiler (WIN32_CC)

explain_ia64_reqs:
    $(MSG) Skipping IA64 builds as some requirements are not met:
    if not defined IA_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ IA64 compiler (IA64_CC)

explain_win64_reqs:
    $(MSG) Skipping WIN64 builds as some requirements are not met:
    if not defined WIN64_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ amd64 compiler (WIN64_CC)

explain_arm_reqs:
    $(MSG) Skipping ARM builds as some requirements are not met:
    if not defined ARM_CC	$(MSG) $(CANT_FIND) Microsoft Visual C++ arm compiler (ARM_CC)

check_bios_opts:
    @if not defined GNUEFI $(MSG) Warning: GNUEFI undefined. Dropping crc32 and gpt modules build.

check_dos_opts:
    @if not defined GNUEFI $(MSG) Warning: GNUEFI undefined. Dropping crc32 and gpt modules build.
    @if not defined LMPTK $(MSG) Warning: LMPTK undefined. Dropping netbios and parts of uuid modules build.

check_win95_opts:
    @if not defined GNUEFI $(MSG) Warning: GNUEFI undefined. Dropping crc32 and gpt modules build.
    @if not defined 98DDK $(MSG) Warning: 98DDK undefined. Dropping support for Win9X disk I/O. Only NT4 disk I/O supported.

check_win32_opts:
    @if not defined GNUEFI $(MSG) Warning: GNUEFI undefined. Dropping crc32 and gpt modules build.

check_ia64_opts: check_win32_opts

check_win64_opts: check_win32_opts

check_arm_opts: check_win32_opts

# Rules for building specific versions of the SysLib library
bios: lib\bios

dos: lib\dos

win95: lib\win95

win32: lib\win32

ia64: lib\ia64

win64: lib\win64

arm: lib\arm

bios\debug: lib\bios\debug

dos\debug: lib\dos\debug

win95\debug: lib\win95\debug

win32\debug: lib\win32\debug

ia64\debug: lib\ia64\debug

win64\debug: lib\win64\debug

arm\debug: lib\arm\debug

# Rules for building Centralized copies of the SysLib library
$(LIBDIR):
    $(MSG) Creating directory $(LIBDIR)
    md $(LIBDIR)

# Copy the include files to $(OUTDIR)
INCDIR:
!IF DEFINED(OUTDIR)
    :# Update the include files from ..\include to $(OUTDIR)\include
    xcopy /C /D /Y *.h $(OUTDIR)\ &:# Make sure this line does not end with a backslash
    :# Then remove the include files there that have been deleted from here
    for %%h in ("$(OUTDIR)\*.h") do @if not exist ".\%%~nxh" echo Deleting "$(OUTDIR)\%%~nxh" & del "$(OUTDIR)\%%~nxh"
!else
    rem :# No need to copy anything when using the default output directories
!ENDIF

lib\bios: $(LIBDIR)\SysLibbt.lib

$(LIBDIR)\SysLibbt.lib: $(OD)BIOS\BIN\T\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)BIOS\BIN\T\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library BIOS release version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\BIOS.mak $(MAKEDEFS) "DEBUG=0" "PROGRAM=SysLib" "MEM=T" dirs $@

lib\dos: lib\dosT lib\dosS lib\dosL
    rem All DOS versions done

lib\dosT: $(LIBDIR)\SysLibdt.lib

$(LIBDIR)\SysLibdt.lib: $(OD)DOS\BIN\T\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)DOS\BIN\T\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library DOS tiny release version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\DOS.mak $(MAKEDEFS) "DEBUG=0" "PROGRAM=SysLib" "MEM=T" dirs $@

lib\dosS: $(LIBDIR)\SysLibds.lib

$(LIBDIR)\SysLibds.lib: $(OD)DOS\BIN\S\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)DOS\BIN\S\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library DOS small release version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\DOS.mak $(MAKEDEFS) "DEBUG=0" "PROGRAM=SysLib" "MEM=S" dirs $@

lib\dosL: $(LIBDIR)\SysLibdl.lib

$(LIBDIR)\SysLibdl.lib: $(OD)DOS\BIN\L\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)DOS\BIN\L\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library DOS large release version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\DOS.mak $(MAKEDEFS) "DEBUG=0" "PROGRAM=SysLib" "MEM=L" dirs $@

lib\win95: $(LIBDIR)\SysLibw95.lib

$(LIBDIR)\SysLibw95.lib: $(OD)WIN95\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)WIN95\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library WIN95 release version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\WIN95.mak $(MAKEDEFS) "DEBUG=0" "PROGRAM=SysLib" dirs $@

lib\win32: $(LIBDIR)\SysLibw32.lib

$(LIBDIR)\SysLibw32.lib: $(OD)WIN32\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)WIN32\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library WIN32 release version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\WIN32.mak $(MAKEDEFS) "DEBUG=0" "PROGRAM=SysLib" dirs $@

lib\ia64: $(LIBDIR)\SysLibia64.lib

$(LIBDIR)\SysLibia64.lib: $(OD)IA64\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)IA64\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library IA64 release version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\IA64.mak $(MAKEDEFS) "DEBUG=0" "PROGRAM=SysLib" dirs $@

lib\win64: $(LIBDIR)\SysLibw64.lib

$(LIBDIR)\SysLibw64.lib: $(OD)WIN64\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)WIN64\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library WIN64 release version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\WIN64.mak $(MAKEDEFS) "DEBUG=0" "PROGRAM=SysLib" dirs $@

lib\arm: $(LIBDIR)\SysLiba32.lib

$(LIBDIR)\SysLiba32.lib: $(OD)ARM\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)ARM\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library ARM release version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\ARM.mak $(MAKEDEFS) "DEBUG=0" "PROGRAM=SysLib" dirs $@


lib\bios\debug: $(LIBDIR)\SysLibbtd.lib

$(LIBDIR)\SysLibbtd.lib: $(OD)BIOS\Debug\BIN\T\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)BIOS\Debug\BIN\T\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library BIOS debug version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\BIOS.mak $(MAKEDEFS) "DEBUG=1" "PROGRAM=SysLib" "MEM=T" dirs $@

lib\dos\debug: lib\dosT\debug lib\dosS\debug lib\dosL\debug
    rem All DOS versions done

lib\dosT\debug: $(LIBDIR)\SysLibdtd.lib

$(LIBDIR)\SysLibdtd.lib: $(OD)DOS\Debug\BIN\T\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)DOS\Debug\BIN\T\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library DOS tiny debug version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\DOS.mak $(MAKEDEFS) "DEBUG=1" "PROGRAM=SysLib" "MEM=T" dirs $@

lib\dosS\debug: $(LIBDIR)\SysLibdsd.lib

$(LIBDIR)\SysLibdsd.lib: $(OD)DOS\Debug\BIN\S\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)DOS\Debug\BIN\S\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library DOS small debug version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\DOS.mak $(MAKEDEFS) "DEBUG=1" "PROGRAM=SysLib" "MEM=S" dirs $@

lib\dosL\debug: $(LIBDIR)\SysLibdld.lib

$(LIBDIR)\SysLibdld.lib: $(OD)DOS\Debug\BIN\L\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)DOS\Debug\BIN\L\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library DOS large debug version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\DOS.mak $(MAKEDEFS) "DEBUG=1" "PROGRAM=SysLib" "MEM=L" dirs $@

lib\win32\debug: $(LIBDIR)\SysLibw32d.lib

$(LIBDIR)\SysLibw32d.lib: $(OD)WIN32\Debug\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)WIN32\Debug\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library WIN32 debug version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\WIN32.mak $(MAKEDEFS) "DEBUG=1" "PROGRAM=SysLib" dirs $@

lib\win95\debug: $(LIBDIR)\SysLibw95d.lib

$(LIBDIR)\SysLibw95d.lib: $(OD)WIN95\Debug\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)WIN95\Debug\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library WIN95 debug version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\WIN95.mak $(MAKEDEFS) "DEBUG=1" "PROGRAM=SysLib" dirs $@

lib\ia64\debug: $(LIBDIR)\SysLibia64d.lib

$(LIBDIR)\SysLibia64d.lib: $(OD)IA64\Debug\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)IA64\Debug\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library IA64 debug version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\IA64.mak $(MAKEDEFS) "DEBUG=1" "PROGRAM=SysLib" dirs $@

lib\win64\debug: $(LIBDIR)\SysLibw64d.lib

$(LIBDIR)\SysLibw64d.lib: $(OD)WIN64\Debug\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)WIN64\Debug\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library WIN64 debug version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\WIN64.mak $(MAKEDEFS) "DEBUG=1" "PROGRAM=SysLib" dirs $@

lib\arm\debug: $(LIBDIR)\SysLiba32d.lib

$(LIBDIR)\SysLiba32d.lib: $(OD)ARM\Debug\SysLib.lib $(LIBDIR)
    if exist %s echo F | xcopy /d /y %s $@

$(OD)ARM\Debug\SysLib.lib: NUL
    $(HEADLINE) Building SysLib library ARM debug version
    rem call make.bat -L $@
    $(MAKE) /$(MAKEFLAGS) /f $(STINCLUDE)\ARM.mak $(MAKEDEFS) "DEBUG=1" "PROGRAM=SysLib" dirs $@

# Dummy target, to build a source archive
dist zip: SysLib.lib
    $(MSG) Building SysLib.zip
    if exist SysLib.zip del SysLib.zip
    set PATH=$(PATH);C:\Program Files\7-zip
    7z.exe a SysLib.zip *.txt *.bat *.mak *makefile exe *.c *.h
    rem # Delete files that got dragged in by wild cards, but that we don't want in the source zip.
    7z.exe d SysLib.zip config.bat config.*.bat

clean mostlyclean distclean:
    $(MAKE) /c /s /f "$(STINCLUDE)\All.mak" $@
    if exist $(LIBDIR) rd /s /q $(LIBDIR)

!INCLUDE <All.mak>
